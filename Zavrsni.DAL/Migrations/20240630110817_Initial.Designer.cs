// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zavrsni.DAL;

#nullable disable

namespace Zavrsni.DAL.Migrations
{
    [DbContext(typeof(DataManagerDbContext))]
    [Migration("20240630110817_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoktorPacijent", b =>
                {
                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<int>("PacijentID")
                        .HasColumnType("int");

                    b.HasKey("DoktorID", "PacijentID");

                    b.HasIndex("PacijentID");

                    b.ToTable("DoktorPacijent");
                });

            modelBuilder.Entity("Zavrsni.Model.Doktor", b =>
                {
                    b.Property<int>("DoktorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drzava")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KrajRadnogVremena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PocetakRadnogVremena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecijalizacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoktorID");

                    b.HasIndex("SpecijalizacijaID");

                    b.ToTable("Doktori");
                });

            modelBuilder.Entity("Zavrsni.Model.Pacijent", b =>
                {
                    b.Property<int>("PacijentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacijentID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatumRodjenja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drzava")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacijentID");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("Zavrsni.Model.Pregled", b =>
                {
                    b.Property<int>("PregledID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PregledID"));

                    b.Property<DateTime>("DatumIVrijemePregleda")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacijentID")
                        .HasColumnType("int");

                    b.HasKey("PregledID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("PacijentID");

                    b.ToTable("Pregledi");
                });

            modelBuilder.Entity("Zavrsni.Model.Specijalizacija", b =>
                {
                    b.Property<int>("SpecijalizacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecijalizacijaID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecijalizacijaID");

                    b.ToTable("Specijalizacije");

                    b.HasData(
                        new
                        {
                            SpecijalizacijaID = 1,
                            Naziv = "Opća praksa"
                        },
                        new
                        {
                            SpecijalizacijaID = 2,
                            Naziv = "Kardiologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 3,
                            Naziv = "Dermatologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 4,
                            Naziv = "Ginekologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 5,
                            Naziv = "Interna medicina"
                        },
                        new
                        {
                            SpecijalizacijaID = 6,
                            Naziv = "Neurologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 7,
                            Naziv = "Oftalmologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 8,
                            Naziv = "Ortopedija"
                        },
                        new
                        {
                            SpecijalizacijaID = 9,
                            Naziv = "Otorinolaringologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 10,
                            Naziv = "Pedijatrija"
                        },
                        new
                        {
                            SpecijalizacijaID = 11,
                            Naziv = "Psihijatrija"
                        },
                        new
                        {
                            SpecijalizacijaID = 12,
                            Naziv = "Radiologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 13,
                            Naziv = "Stomatologija"
                        },
                        new
                        {
                            SpecijalizacijaID = 14,
                            Naziv = "Urologija"
                        });
                });

            modelBuilder.Entity("DoktorPacijent", b =>
                {
                    b.HasOne("Zavrsni.Model.Doktor", null)
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zavrsni.Model.Pacijent", null)
                        .WithMany()
                        .HasForeignKey("PacijentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zavrsni.Model.Doktor", b =>
                {
                    b.HasOne("Zavrsni.Model.Specijalizacija", "Specijalizacija")
                        .WithMany()
                        .HasForeignKey("SpecijalizacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specijalizacija");
                });

            modelBuilder.Entity("Zavrsni.Model.Pregled", b =>
                {
                    b.HasOne("Zavrsni.Model.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zavrsni.Model.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });
#pragma warning restore 612, 618
        }
    }
}
